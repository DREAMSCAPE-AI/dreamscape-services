// Dreamscape Services - Unified PostgreSQL Schema
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========== AUTH SERVICE MODELS ==========
model User {
  id            String   @id @default(uuid())
  email         String   @unique
  username      String?  @unique
  password      String
  firstName     String?
  lastName      String?
  phoneNumber   String?
  dateOfBirth   DateTime?
  nationality   String?
  userCategory  UserCategory?  @default(LEISURE)
  isVerified    Boolean  @default(false)
  role          Role     @default(USER)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  // Relations
  profile   UserProfile?
  behaviors UserBehavior[]
  sessions      Session[]
  tokenBlacklist   TokenBlacklist[]
  searches      SearchHistory[]
  preferences   UserPreferences?
  settings      UserSettings?
  travelOnboarding TravelOnboardingProfile?

  // Onboarding status
  onboardingCompleted Boolean @default(false)
  onboardingCompletedAt DateTime?
  
  @@map("users")
}

model UserPreferences {
  id                    String  @id @default(cuid())
  userId                String  @unique
  preferredAirlines     String[]
  preferredCabinClass   String?
  budgetRange           Json?   // {min: number, max: number}
  preferredDepartureTime String? // morning, afternoon, evening
  loyaltyPrograms       Json?   // Array of loyalty program details
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_preferences")
}

// ========== USER SERVICE MODELS ==========
model UserProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName   String
  lastName    String
  phone       String?
  dateOfBirth DateTime?
  avatar      String?
  preferences Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("user_profiles")
}

model UserBehavior {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action    String
  data      Json?
  timestamp DateTime @default(now())

  @@map("user_behaviors")
}

model UserSettings {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Account preferences
  language    String   @default("English")
  currency    String   @default("USD")
  timezone    String   @default("UTC")
  
  // Notification settings
  dealAlerts      Boolean @default(true)
  tripReminders   Boolean @default(true)
  priceAlerts     Boolean @default(true)
  newsletter      Boolean @default(false)
  
  // Privacy settings
  profileVisibility String  @default("public") // public, private
  dataSharing      Boolean @default(false)
  marketing        Boolean @default(true)
  
  // Travel preferences
  preferredDestinations String[] @default([])
  accommodationType    String[] @default([])
  activities           String[] @default([])
  dietary              String[] @default([])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("user_settings")
}

// ========== ONBOARDING SERVICE MODELS ==========
model TravelOnboardingProfile {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Statut du questionnaire
  isCompleted             Boolean  @default(false)
  completedSteps          String[] @default([]) // Track progress per section
  completedAt             DateTime?
  version                 Int      @default(1)  // For schema evolution

  // === DESTINATIONS & STYLE ===
  preferredDestinations   Json?    // {regions: string[], countries: string[], climates: string[]}
  travelStyle             TravelStyle?

  // === BUDGET GLOBAL ===
  globalBudgetRange       Json?    // {min: number, max: number, currency: string}
  budgetByCategory        Json?    // {transport: {...}, accommodation: {...}, activities: {...}, food: {...}}
  budgetFlexibility       BudgetFlexibility?

  // === TYPES DE VOYAGE ===
  travelTypes             TravelType[] @default([])
  travelPurposes          String[] @default([]) // leisure, business, education, health, etc.

  // === PÉRIODE & TIMING ===
  preferredSeasons        String[] @default([]) // spring, summer, autumn, winter
  preferredTripDuration   Json?    // {short: {min: 1, max: 3}, medium: {min: 4, max: 7}, long: {min: 8, max: 21}}
  dateFlexibility         DateFlexibility?

  // === HÉBERGEMENT ===
  accommodationTypes      String[] @default([]) // hotel, apartment, hostel, resort, camping, etc.
  accommodationLevel      ComfortLevel?
  roomPreferences         Json?    // {type: string, amenities: string[], view: string}

  // === TRANSPORT ===
  preferredAirlines       String[] @default([])
  cabinClassPreference    String?  // economy, premium_economy, business, first
  transportModes          String[] @default([]) // flight, train, car, bus, boat
  transportBudgetShare    Float?   // Percentage of total budget for transport

  // === ACTIVITÉS & INTÉRÊTS ===
  activityTypes           String[] @default([]) // museums, nature, adventure, nightlife, shopping, food, etc.
  interestCategories      String[] @default([]) // history, art, nature, technology, sports, wellness, etc.
  activityLevel           ActivityLevel?

  // === GROUPE DE VOYAGE ===
  travelGroupTypes        String[] @default([]) // solo, couple, family, friends, business_group
  groupSize               Json?    // {min: number, max: number, typical: number}
  travelWithChildren      Boolean  @default(false)
  childrenAges            Int[]    @default([])

  // === CONTRAINTES & BESOINS SPÉCIAUX ===
  dietaryRequirements     String[] @default([])
  accessibilityNeeds      String[] @default([])
  healthConsiderations    String[] @default([])
  languageBarriers        String[] @default([]) // Languages the user doesn't speak
  culturalConsiderations  String[] @default([])

  // === CONFORT & LUXE ===
  comfortLevel            ComfortLevel?
  serviceLevel            String?  // self_service, standard_service, full_service, concierge
  privacyPreference       String?  // social, mixed, private

  // === PRÉFÉRENCES CLIMATIQUES ===
  climatePreferences      String[] @default([]) // tropical, temperate, cold, arid, humid, etc.
  weatherTolerances       Json?    // {hot: boolean, cold: boolean, rain: boolean, humidity: boolean}

  // === EXPÉRIENCES ===
  experienceLevel         String?  // beginner, intermediate, experienced, expert
  riskTolerance          RiskTolerance?
  culturalImmersion       String?  // tourist, explorer, local_experience

  // === LOYAUTÉ & PROGRAMMES ===
  loyaltyPrograms         Json?    // Array of {program: string, number: string, level: string}
  paymentPreferences      String[] @default([]) // credit_card, debit, digital_wallet, etc.

  // Timestamps
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@map("travel_onboarding_profiles")
}

// ========== VOYAGE SERVICE MODELS ==========
model FlightData {
  id            String   @id @default(cuid())
  flightNumber  String
  airline       String
  origin        String
  destination   String
  departureTime DateTime
  arrivalTime   DateTime
  price         Decimal  @db.Decimal(10, 2)
  currency      String   @default("EUR")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("flight_data")
}

model HotelData {
  id          String   @id @default(cuid())
  name        String
  location    String
  rating      Float?
  pricePerNight Decimal @db.Decimal(10, 2)
  currency    String   @default("EUR")
  amenities   Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("hotel_data")
}

model BookingData {
  id          String   @id @default(cuid())
  userId      String
  type        BookingType
  reference   String   @unique
  status      BookingStatus
  totalAmount Decimal  @db.Decimal(10, 2)
  currency    String   @default("EUR")
  data        Json     // Flexible data for different booking types
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("booking_data")
}

model LocationData {
  id          String   @id @default(cuid())
  name        String
  country     String
  city        String
  coordinates Json?    // {lat: number, lng: number}
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("location_data")
}

// ========== AI SERVICE MODELS ==========
model PredictionData {
  id          String   @id @default(cuid())
  userId      String?
  type        PredictionType
  input       Json
  output      Json
  confidence  Float?
  createdAt   DateTime @default(now())

  @@map("prediction_data")
}

model Analytics {
  id        String   @id @default(cuid())
  service   String   // 'auth', 'user', 'voyage', 'ai'
  event     String
  data      Json?
  userId    String?
  timestamp DateTime @default(now())

  @@map("analytics")
}

model SearchHistory {
  id              String   @id @default(cuid())
  userId          String?
  sessionId       String   // For anonymous users
  
  // Search parameters
  origin          String
  destination     String
  departureDate   DateTime
  returnDate      DateTime?
  passengers      Json     // {adults: number, children: number, infants: number}
  cabinClass      String?
  
  // Search metadata
  searchedAt      DateTime @default(now())
  resultsCount    Int?
  
  user User? @relation(fields: [userId], references: [id])
  
  @@map("search_history")
}

// ========== ENUMS ==========
enum BookingType {
  FLIGHT
  HOTEL
  TRANSFER
  ACTIVITY
  PACKAGE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PredictionType {
  PRICE_FORECAST
  RECOMMENDATION
  DEMAND_PREDICTION
  ROUTE_OPTIMIZATION
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum UserCategory {
  LEISURE
  BUSINESS
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model TokenBlacklist {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now()) @map("created_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("token_blacklist")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

// ========== ONBOARDING ENUMS ==========
enum TravelType {
  ADVENTURE
  CULTURAL
  RELAXATION
  BUSINESS
  FAMILY
  ROMANTIC
  WELLNESS
  EDUCATIONAL
  CULINARY
  SHOPPING
  NIGHTLIFE
  NATURE
  URBAN
  BEACH
  MOUNTAIN
  HISTORICAL
}

enum TravelStyle {
  PLANNED
  SPONTANEOUS
  MIXED
}

enum ComfortLevel {
  BASIC
  STANDARD
  PREMIUM
  LUXURY
}

enum BudgetFlexibility {
  STRICT
  FLEXIBLE
  VERY_FLEXIBLE
}

enum DateFlexibility {
  FLEXIBLE
  SEMI_FLEXIBLE
  FIXED
}

enum ActivityLevel {
  LOW
  MODERATE
  HIGH
  VERY_HIGH
}

enum RiskTolerance {
  CONSERVATIVE
  MODERATE
  ADVENTUROUS
}